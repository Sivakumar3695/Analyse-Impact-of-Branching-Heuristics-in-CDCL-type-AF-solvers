from pyminsat.Solver import Solver
from time import time
import main


class CustomSolver(Solver):
    def __init__(self):
        super().__init__(True)
        self.__truevariables = []

    def _bumpvariableactivity(self, lit_obj):
        return

    def _bumpvariableactivityinclause(self, lit_obj_list):
        first_lit_obj = lit_obj_list[0]
        if len(lit_obj_list) == 1:
            return
        sec_lit_obj = lit_obj_list[1]
        if sec_lit_obj._negate:
            self._literalactivity['-' + sec_lit_obj._varsymbol] += 100
            self._literalactivity['-' + first_lit_obj._varsymbol] -= 100
        else:
            self._literalactivity['-' + first_lit_obj._varsymbol] += 10

    def _getnextliteralobject(self):
        min_attack = 0
        out_lit_obj = None
        for var in self._literalobjectlist:
            lit_obj = self._literalobjectlist[var]
            var_obj = self._variableobjectlist[lit_obj._varsymbol]
            if out_lit_obj is None or self._literalactivity[var] < min_attack and var_obj._value is None:
                min_attack = self._literalactivity[var]
                out_lit_obj = lit_obj
        return out_lit_obj

    def _handlevariableassignment(self, var_obj, lit, from_clause):
        super(CustomSolver, self)._handlevariableassignment(var_obj, lit, from_clause)
        if var_obj._value:
            self.__truevariables.append(var_obj._symbol)

    # def _ismodelfound(self):
    #     for var in self.__truevariables:
    #         if self._variableobjectlist[var]._value:
    #             return True
    #         else:
    #             self.__truevariables.remove(var)

    def _handleliteralactivityinclause(self, clause):
        return
        # type-1
        # if self._valueOf(clause._lits[0]) or len(clause._lits) == 1:
        #     # this method will be handled only for clauses that evaluates to True
        #     return
        # lit_obj = clause._lits[1]
        # if self._valueOf(lit_obj) is not None:
        #     return
        # lit_symbol = '-' + lit_obj._varsymbol if lit_obj._negate else lit_obj._varsymbol
        # self._literalactivity[lit_symbol] = self._literalactivity[lit_symbol] - 100

        #type-2
        # if self._valueOf(clause._lits[0]) is False or len(clause._lits) == 1:
        #     # this method will be handled only for clauses that evaluates to True
        #     return
        # elif self._valueOf(clause._lits[0]) is None:
        #     self._literalactivity[clause._lits[1]._varsymbol] = self._literalactivity[clause._lits[1]._varsymbol] + 1
        #     return
        # lit_obj = clause._lits[1]
        # if self._valueOf(lit_obj) is not None:
        #     return
        # lit_symbol = '-' + lit_obj._varsymbol if lit_obj._negate else lit_obj._varsymbol
        # var_dec = 100 if lit_obj._negate else 1
        # self._literalactivity[lit_symbol] = self._literalactivity[lit_symbol] - var_dec

def get_admissible_set(attack_set, vertex_list, is_un_sat):
    my_solver = CustomSolver()
    cla_cnt = 0

    # attack_set = {1: [2, 4, 5, 6, 7, 9, 10], 2: [3, 4, 5, 8, 9, 10], 3: [1, 5, 8, 9], 4: [5, 6, 7, 8, 9], 5: [6, 7, 8, 9, 10], 6: [2, 3, 7, 8, 9, 10, 5], 7: [2, 3, 9, 10], 8: [1, 7, 10], 9: [8, 10], 10: [4, 1, 5]}
    # attack_set = {1: [2, 4, 5, 6, 7, 9], 2: [4, 5, 7, 6], 3: [1, 2, 5, 6, 8], 4: [3, 5, 7, 8, 9], 5: [6, 7, 8, 9, 3], 6: [2, 7, 8, 9], 7: [3, 8], 8: [1, 2, 9], 9: [3, 8]}
    # attack_set = {1: [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 21, 22, 23, 36, 48], 2: [1, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 10, 30, 35, 42, 46], 3: [4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 23, 24, 25, 27, 28, 31, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 48, 50, 2, 12, 13, 19, 21, 32, 38], 4: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 3, 16, 17], 5: [2, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 43, 44, 45, 47, 48, 50, 1, 3, 36, 42, 49], 6: [7, 9, 10, 11, 14, 15, 17, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 1, 2, 4, 16, 18, 27], 7: [9, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 49, 2, 39, 43], 8: [6, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 38, 39, 40, 41, 44, 45, 47, 49, 50, 1, 2, 3, 5, 29, 32, 46, 48], 9: [5, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 1, 2, 3, 4, 15, 35, 50], 10: [2, 5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 9, 21, 36], 11: [8, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 29, 32, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 4, 5, 9, 10, 28, 35, 42], 12: [2, 3, 6, 11, 13, 14, 15, 16, 17, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 1, 4, 5, 10, 18, 19, 23], 13: [3, 6, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 1, 2, 7, 9, 12, 28, 46], 14: [15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 1, 2, 4, 5, 11, 23, 40, 45], 15: [2, 9, 13, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 7, 8, 10, 11, 12, 14, 40, 41], 16: [4, 6, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 2, 3, 5, 9, 11, 12, 14, 26, 40, 41], 17: [4, 7, 18, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 2, 3, 5, 6, 10, 11, 12, 13, 22, 29, 35], 18: [6, 12, 19, 20, 21, 22, 23, 24, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 2, 9, 13, 15, 16, 17, 30, 41, 47], 19: [3, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 37, 38, 40, 41, 44, 45, 46, 47, 48, 50, 1, 2, 7, 9, 15, 16, 17, 32, 36, 39], 20: [3, 5, 12, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 49, 50, 1, 6, 9, 10, 11, 13, 17, 18], 21: [1, 3, 10, 15, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 39, 40, 42, 43, 44, 47, 49, 50, 2, 4, 6, 9, 12, 13, 29, 34, 35, 48], 22: [1, 3, 5, 11, 15, 17, 20, 23, 25, 28, 29, 30, 32, 33, 35, 36, 37, 41, 43, 44, 45, 46, 47, 49, 50, 9, 10, 12, 13, 14, 16, 27, 39], 23: [1, 12, 14, 24, 25, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 5, 8, 9, 17, 18, 22, 28, 33, 49], 24: [25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 5, 8, 10, 13, 18, 20], 25: [7, 18, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 41, 42, 43, 44, 45, 47, 49, 50, 2, 4, 5, 6, 8, 12, 15, 20, 22, 24, 40], 26: [3, 16, 17, 18, 27, 28, 30, 33, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 1, 8, 9, 10, 13, 21, 24, 29, 42], 27: [5, 6, 11, 22, 24, 28, 29, 30, 33, 34, 35, 38, 40, 41, 44, 45, 46, 47, 48, 50, 1, 2, 4, 8, 9, 10, 12, 13, 16, 17, 36, 49], 28: [11, 13, 14, 18, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 48, 49, 4, 6, 10, 24, 25, 26, 27, 40, 44, 47], 29: [3, 6, 8, 17, 21, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 2, 5, 7, 9, 13, 15, 18, 23, 27, 30], 30: [2, 3, 4, 8, 18, 25, 29, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 5, 9, 14, 16, 27, 32, 41, 46], 31: [11, 22, 26, 29, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 6, 9, 10, 12, 13, 17, 18, 23, 24, 25, 48, 50], 32: [3, 8, 13, 14, 19, 23, 26, 27, 30, 33, 34, 35, 36, 39, 40, 42, 44, 46, 47, 48, 50, 2, 7, 9, 12, 16, 18, 20, 21, 24, 25, 29, 38, 41], 33: [20, 23, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 3, 4, 5, 6, 10, 12, 13, 16, 18, 19, 21, 25, 27, 28, 29, 46, 50], 34: [1, 3, 6, 12, 20, 21, 22, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 49, 50, 10, 13, 15, 16, 25, 26, 27, 40, 46], 35: [2, 9, 11, 12, 17, 20, 21, 25, 33, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 1, 6, 14, 22, 23, 26, 27, 28, 30, 43], 36: [1, 5, 10, 19, 27, 37, 38, 40, 41, 43, 44, 46, 47, 48, 49, 50, 14, 16, 17, 20, 24, 29, 30, 34, 42], 37: [1, 4, 8, 9, 24, 26, 38, 40, 41, 44, 46, 47, 3, 5, 6, 10, 12, 13, 14, 17, 18, 22, 23, 25, 30, 31, 35, 42, 48], 38: [3, 7, 18, 22, 24, 31, 32, 39, 41, 42, 43, 45, 46, 47, 48, 2, 6, 9, 11, 12, 13, 14, 15, 25, 26, 30, 33, 34, 35, 36, 49], 39: [2, 7, 19, 22, 25, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 4, 6, 9, 10, 15, 16, 17, 20, 26, 28, 29, 33, 35, 41], 40: [4, 5, 6, 14, 15, 16, 20, 22, 25, 28, 34, 42, 43, 44, 47, 48, 49, 50, 2, 3, 8, 9, 10, 11, 17, 18, 23, 27, 29, 32, 35, 36, 41, 46], 41: [15, 16, 18, 21, 30, 32, 39, 40, 43, 44, 45, 46, 47, 48, 1, 3, 8, 9, 10, 12, 20, 24, 25, 27, 28, 29, 31, 34, 37, 42, 49], 42: [1, 2, 3, 5, 9, 11, 16, 19, 26, 27, 28, 36, 37, 41, 43, 44, 45, 47, 48, 49, 50, 14, 17, 18, 21, 23, 24, 33, 34, 38, 39], 43: [7, 8, 16, 19, 27, 35, 37, 44, 46, 47, 48, 49, 50, 1, 2, 5, 10, 14, 17, 23, 24, 31, 38, 39, 41], 44: [9, 28, 38, 46, 47, 48, 49, 2, 3, 4, 7, 8, 10, 11, 13, 14, 17, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 40, 42, 50], 45: [14, 21, 36, 40, 44, 47, 49, 50, 1, 2, 3, 4, 7, 8, 11, 12, 13, 15, 16, 18, 19, 22, 25, 26, 28, 33, 34, 35, 39, 42], 46: [2, 3, 8, 12, 13, 21, 25, 30, 33, 34, 40, 42, 45, 48, 49, 4, 7, 9, 14, 17, 19, 20, 22, 24, 26, 31, 32, 35, 37, 41, 43, 50], 47: [12, 18, 28, 46, 48, 49, 50, 1, 2, 4, 6, 8, 9, 11, 13, 14, 15, 16, 20, 23, 25, 27, 29, 31, 32, 34, 36, 38, 42, 43], 48: [1, 8, 20, 21, 22, 25, 31, 34, 37, 45, 49, 50, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 26, 30, 33, 36, 38, 44, 47], 49: [3, 4, 5, 10, 17, 19, 23, 27, 31, 38, 41, 50, 1, 2, 6, 7, 12, 14, 16, 18, 20, 21, 22, 29, 30, 33, 34, 35, 43, 44, 46, 48], 50: [9, 28, 31, 33, 38, 44, 46, 2, 3, 4, 5, 6, 11, 18, 19, 20, 21, 22, 25, 26, 27, 32, 35, 36, 42, 48]}
    # attack_set = {1: [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 24, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 66, 68, 70, 72, 73, 74, 75], 2: [3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 71, 72, 73, 74, 6], 3: [4, 6, 7, 8, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 38, 40, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 66, 68, 73, 74, 75, 34], 4: [5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 32, 34, 35, 36, 37, 39, 41, 42, 44, 47, 49, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 29], 5: [6, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 75], 6: [1, 2, 9, 10, 11, 12, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 53, 54, 56, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 73, 14, 74], 7: [6, 8, 9, 10, 12, 13, 14, 16, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 70, 71, 72, 73, 74, 75], 8: [5, 6, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 3, 7], 9: [3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 51, 52, 53, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 74, 75, 44], 10: [3, 12, 14, 16, 17, 18, 19, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75], 11: [5, 7, 10, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 3, 47], 12: [8, 11, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 47, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 75, 6], 13: [8, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 35, 36, 38, 40, 42, 45, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74], 14: [3, 6, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 53, 56, 57, 59, 63, 64, 65, 68, 69, 70, 71, 72, 74], 15: [2, 8, 10, 11, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75], 16: [3, 11, 12, 17, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 75, 6, 69], 17: [15, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 5], 18: [3, 5, 7, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 62], 19: [2, 3, 4, 13, 17, 18, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75], 20: [3, 6, 16, 17, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 41, 74], 21: [16, 18, 20, 22, 25, 28, 29, 31, 32, 34, 35, 37, 39, 41, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 5, 9, 19, 62], 22: [1, 17, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 55, 56, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 14, 40], 23: [1, 8, 19, 21, 25, 26, 28, 29, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 22, 75], 24: [2, 5, 8, 9, 13, 14, 19, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 75, 3], 25: [1, 4, 8, 10, 13, 14, 15, 18, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75], 26: [3, 10, 15, 18, 21, 27, 28, 30, 31, 33, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 6, 12, 25, 39], 27: [3, 6, 8, 16, 21, 23, 28, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 17, 47], 28: [8, 19, 22, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 74, 75, 5], 29: [1, 2, 4, 7, 8, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 9, 10, 11], 30: [1, 6, 15, 21, 23, 27, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 69, 71, 72, 73, 75, 13, 37], 31: [4, 9, 17, 22, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 67, 68, 69, 72, 73, 74, 75, 5, 27, 66], 32: [6, 15, 22, 26, 27, 33, 34, 36, 37, 38, 39, 40, 41, 43, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 69, 71, 74, 75, 12, 23, 45], 33: [3, 4, 8, 16, 25, 31, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 73, 74, 9, 20, 24, 71], 34: [3, 12, 13, 26, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 6, 10], 35: [23, 26, 32, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 3, 11, 19], 36: [3, 9, 11, 15, 19, 24, 25, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 62, 65, 66, 68, 69, 70, 71, 73, 74, 75, 32, 63], 37: [2, 3, 5, 12, 13, 22, 30, 31, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 1, 23, 60], 38: [8, 17, 24, 40, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 64, 67, 68, 70, 71, 75, 25], 39: [1, 13, 26, 28, 38, 42, 46, 47, 48, 49, 50, 52, 53, 54, 56, 58, 60, 62, 64, 66, 69, 70, 71, 72, 73, 75, 5, 33, 44], 40: [2, 4, 6, 20, 21, 22, 30, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 57], 41: [2, 3, 7, 12, 13, 17, 19, 20, 24, 26, 33, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 70, 72, 73, 75], 42: [3, 9, 21, 27, 32, 43, 44, 46, 47, 48, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 8], 43: [5, 7, 13, 15, 18, 20, 24, 25, 33, 34, 38, 44, 45, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 19, 26], 44: [9, 16, 17, 28, 32, 36, 39, 46, 48, 50, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 1, 42, 74], 45: [1, 4, 7, 14, 22, 31, 32, 34, 35, 39, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 30, 37], 46: [12, 13, 21, 30, 31, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 74, 75, 2, 5, 14, 20], 47: [1, 6, 8, 11, 27, 29, 32, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 69, 70, 71, 72, 75, 15, 21, 73], 48: [4, 8, 9, 12, 13, 17, 25, 35, 50, 52, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 6, 23], 49: [3, 5, 6, 7, 11, 14, 16, 17, 29, 42, 44, 48, 50, 51, 52, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 30], 50: [1, 7, 8, 12, 13, 18, 27, 31, 38, 45, 46, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 26], 51: [2, 6, 16, 17, 22, 31, 37, 39, 44, 48, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 13, 14, 43, 52], 52: [4, 14, 23, 27, 32, 40, 46, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 22, 42, 48], 53: [7, 12, 24, 33, 42, 49, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 17, 23, 25, 28], 54: [2, 8, 9, 14, 18, 22, 27, 37, 44, 49, 50, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 32], 55: [2, 5, 9, 12, 14, 20, 30, 37, 39, 42, 56, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 19, 23, 27, 38], 56: [2, 18, 30, 31, 38, 40, 44, 50, 51, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 9, 14], 57: [4, 9, 15, 22, 30, 31, 39, 40, 48, 58, 60, 61, 62, 63, 66, 68, 69, 71, 73, 74, 75, 21, 24, 27, 52, 67], 58: [8, 12, 21, 44, 48, 51, 60, 61, 62, 64, 66, 67, 68, 71, 72, 73, 74, 75, 11, 25, 33, 54], 59: [1, 3, 8, 9, 11, 18, 24, 34, 39, 43, 48, 57, 58, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 30], 60: [14, 16, 23, 25, 35, 36, 37, 38, 41, 45, 47, 49, 55, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 18, 30, 43], 61: [6, 14, 21, 24, 36, 39, 56, 62, 64, 65, 66, 68, 69, 71, 73, 75, 11, 28, 49, 51], 62: [10, 14, 15, 17, 18, 21, 27, 43, 51, 54, 55, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 1], 63: [1, 2, 7, 12, 18, 19, 21, 23, 31, 32, 36, 38, 39, 45, 46, 47, 54, 61, 64, 66, 68, 69, 70, 71, 72, 74, 75, 3, 41], 64: [1, 5, 13, 22, 30, 57, 59, 60, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 3, 6, 15, 28, 38, 50], 65: [1, 7, 12, 19, 22, 25, 30, 31, 38, 39, 50, 57, 58, 63, 67, 68, 69, 70, 73, 74, 75, 18], 66: [5, 6, 13, 14, 15, 26, 28, 31, 38, 50, 51, 56, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 17, 18, 20, 24, 27, 33], 67: [1, 2, 3, 4, 6, 8, 19, 22, 41, 50, 51, 57, 59, 61, 63, 68, 69, 70, 73, 75, 11, 48], 68: [9, 12, 28, 34, 35, 39, 54, 69, 71, 72, 73, 74, 75, 37], 69: [1, 3, 7, 16, 29, 45, 49, 54, 58, 60, 70, 72, 73, 75, 32], 70: [3, 4, 9, 20, 24, 30, 31, 32, 33, 43, 46, 52, 58, 61, 62, 68, 72, 73, 74, 75, 7, 16, 27, 53, 71], 71: [1, 3, 5, 9, 23, 26, 27, 31, 33, 37, 53, 59, 65, 69, 70, 73, 74, 75, 6], 72: [3, 8, 16, 26, 33, 35, 36, 40, 42, 45, 55, 57, 65, 67, 73, 74, 7, 56], 73: [9, 11, 14, 32, 38, 40, 42, 43, 46, 47, 63, 74, 75, 15, 23, 26, 61, 72], 74: [5, 6, 10, 12, 16, 17, 20, 24, 30, 38, 39, 41, 42, 44, 47, 48, 49, 52, 60, 61, 62, 67, 8, 15, 35, 46, 51], 75: [2, 4, 6, 11, 13, 14, 23, 27, 29, 52, 72, 34, 61]}

    for i in vertex_list:
        nodes_attacks_i = main.get_nodes_attacks_given_v(attack_set, i)

        if len(nodes_attacks_i) == 0:
            cla_cnt += 1
            my_solver.add_problem_clause_db(str(vertex_list[i - 1]))
        else:
            for j in nodes_attacks_i:
                cla_cnt += 1
                my_solver.add_problem_clause_db(['-' + str(vertex_list[i - 1]), '-' + str(vertex_list[j - 1])])

            for j in nodes_attacks_i:
                nodes_attacks_j = main.get_nodes_attacks_given_v(attack_set, j)
                clause_paj = ['-' + str(vertex_list[i - 1])]
                for k in nodes_attacks_j:
                    clause_paj.append(str(vertex_list[k - 1]))
                cla_cnt += 1
                my_solver.add_problem_clause_db(clause_paj)

    clause_nf = []
    for vertex in vertex_list:
        clause_nf.append(str(vertex))
    cla_cnt += 1
    my_solver.add_problem_clause_db(clause_nf)

    # print("Total Cla Cnt Expected:" + str(cla_cnt))
    print("Total Cla cnt Found:" + str(len(my_solver._clauses)))
    # for clause in my_solver._clauses:
    #     cl_a = []
    #     for lit in clause._lits:
    #         cl_a.append(lit._varsymbol if not lit._negate else '-' + lit._varsymbol)
    #     print(cl_a)

    start_time = int(time() * 1000)
    solution = my_solver.find_solution()
    # print("Time taken without custom minisat initialisation:" + str(int(time() * 1000) - start_time))
    timetaken = int(time() * 1000) - start_time
    timetaken = round(timetaken / 1000, 0)

    # print(attack_set)
    if solution is None:
        print("Custom minisat solver: Extension not found.")
        # print(attack_set)
        if not is_un_sat:
            print("Warning: Error in custom minisat solver")
        return {'extension': None, 'time_taken_wo_init': timetaken}
    else:
        if is_un_sat:
            print("Warning: Error in custom minisat solver")
        print("Custom minisat solver: Extension found.")
        # print(solution)
        # print(attack_set)
        return {'extension': solution, 'time_taken_wo_init': timetaken}
